apply plugin: 'com.android.application'

project.ext.react = [
        enableHermes: false,  // clean and rebuild if changing
]

apply from: '../../node_modules/react-native/react.gradle'



/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);


android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'



    defaultConfig {
        applicationId "com.beetle.conference"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 10
        versionName "1.0"



        ndk {
            abiFilters 'armeabi-v7a', 'x86', "arm64-v8a"
        }
//        packagingOptions {
//            // The project react-native does not provide 64-bit binaries at the
//            // time of this writing. Unfortunately, packaging any 64-bit
//            // binaries into the .apk will crash the app at runtime on 64-bit
//            // platforms.
//            exclude 'lib/x86_64/libjingle_peerconnection_so.so'
//            exclude 'lib/arm64-v8a/libjingle_peerconnection_so.so'
//        }
    }
    signingConfigs {
        app {
            storeFile file("gradle.keystore")
            storePassword "gradle"
            keyAlias "gradle"
            keyPassword "gradle"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.app
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.appcompat:appcompat:1.0.0'

    implementation 'com.facebook.react:react-native:+'

    implementation "androidx.fragment:fragment:1.3.5"
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'

//    implementation project(':react-native-webrtc')


    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }


}


// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)


